<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
		    
		    
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
	<!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"  destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
        <property name="connectionProperties">
        	<value>clientEncoding=UTF-8</value>
        </property>
        <!-- Connection Pooling Info -->
        <!-- 连接池启动时创建的初始化连接数量 -->
        <property name="initialSize" value="20" />
        <!-- 连接池中可同时连接的最大的连接数（默认值为8，调整为20，高峰单机器在20并发左右，自己根据应用场景定） -->
        <property name="maxActive" value="100" />
        <!-- 连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制（默认为8个，maxIdle不能设置
太小，因为假如在高负载的情况下，连接的打开时间比关闭的时间快，会引起连接池中idle的个数 上升超过maxIdle，而造成频繁的连接销毁>和创建，类似于jvm参数中的Xmx设置) -->
        <!-- 
        <property name="maxIdle" value="50" />
         -->
        <!-- 连接池中最小的空闲的连接数，低于这个数量会被创建新的连接（默认为0，调整为5，该参数越接近maxIdle，性能越>好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大，因为在机器很空闲的时候，也会创建低于minidle个数的连接，类似于jvm>参数中的Xmn设置） -->
        <property name="minIdle" value="10" />
        <!--最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无>限等待（默认为无限，调整为60000ms，避免因线程池不够用，而导致请求被无限制挂起） -->
        <property name="maxWait" value="6000" />
        <!-- 开启池的prepared（默认是false，未调整，经过测试，开启后的性能没有关闭的好。） -->
        <property name="poolPreparedStatements" value="false" />
        <property name="defaultAutoCommit" value="false" />
        <!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
        <property name="logAbandoned" value="false" />
        <!--超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收（默认为false，调整为true) -->
        <property name="removeAbandoned" value="false" />
        <!--超过时间限制，回收没有用(废弃)的连接（默认为 300秒，调整为180） -->
        <property name="removeAbandonedTimeout" value="180" />

        <!-- Validate配置代码 -->
        <!-- GenericObjectPool中针对pool管理，起了一个Evict的TimerTask定时线程进行控制(可通过设置参数timeBetweenEvictionRunsMillis>0),定时对线程池中的链接进行validateObject校验，对无效的链接进行关闭后，会调用ensureMinIdle，适当建立链接保证最小的minIdle连接数。 -->
        <property name="testWhileIdle" value="true" />
        <!-- 对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 代表检查的sql -->
        <property name="validationQuery" value="${db.validationQuery}" />
        <!-- 代表在执行检查时，通过statement设置，statement.setQueryTimeout(validationQueryTimeout) -->
        <property name="validationQueryTimeout" value="1" />
        <!-- 设置的Evict线程的时间，单位ms，大于0才会开启evict检查线程 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <!-- 代表每次检查链接的数量，建议设置和maxActive一样大，这样每次可以有效检查所有的链接. -->
        <property name="numTestsPerEvictionRun" value="50" />
        
        <property name="filters" value="stat"/>
    </bean>

	<!-- Mybatis's sqlSessionFactory config -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!--<property name="typeAliasesPackage" value="com.im.uip"/>-->
		<property name="mapperLocations" value="classpath:/mapping/mapper_mysql/*.xml"/>
		<property name="configLocation" value="classpath:mapping/mybatis-config.xml" />
	</bean>

	<!-- scan mappers and let them be autowired -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.ray.pi.dao.persistence" />
	</bean>

	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 需要事务拦截的路径 -->
	<!--<aop:config>-->
		<!--<aop:pointcut id="serviceOperation" expression="execution(* com.im.uip.service..*.*(..))" />-->
		<!--&lt;!&ndash; order设置得比日志AOP的order值大 &ndash;&gt;-->
		<!--<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" order="2" />-->
	<!--</aop:config>-->

	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="list*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="query*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="detail*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="count*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="insert*" read-only="false" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="add*" read-only="false" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="update*" read-only="false" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="delete*" read-only="false" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="save*" read-only="false" propagation="REQUIRED" rollback-for="Throwable" />
			<tx:method name="newTran*" read-only="false" propagation="REQUIRES_NEW" rollback-for="Throwable" />
			<tx:method name="xaTran*" read-only="false" propagation="REQUIRED" isolation="SERIALIZABLE" rollback-for="Throwable" />
			<tx:method name="*" timeout="30" />
		</tx:attributes>
	</tx:advice>

	<!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO 详情请看: http://code.google.com/p/rapid-framework/wiki/log4jdbc
        如oracle示例: 原来的sql: select * from user where birth_date = ? and username = ? and age > ? 转换后sql: select * from user where birth_date = to_date('2010-08-13','yyyy-mm-dd')
        and username = 'badqiu' and age > 20 -->
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>

</beans>